include(CheckIncludeFile)
include(CheckSymbolExists)

function(configure_flavor_header name flavor)
    configure_file(
        "${CMAKE_CURRENT_FUNCTION_LIST_DIR}/${name}.${flavor}.h.in"
        "include/config/${name}.h"
        COPYONLY)
endfunction()

function(configure_trn)
    #
    # Perform inspections of the system and configure accordingly.
    #
    check_include_file(fcntl.h      I_FCNTL)
    check_include_file(io.h         I_IO)
    check_include_file(pwd.h        I_PWD)
    check_include_file(sgtty.h      I_SGTTY)
    check_include_file(strings.h    I_STRINGS)
    check_include_file(sys/filio.h  I_SYS_FILIO)
    check_include_file(sys/ioctl.h  I_SYS_IOCTL)
    check_include_file(sys/stat.h   I_SYS_STAT)
    check_include_file(sys/utime.h  I_SYS_UTIME)
    check_include_file(sys/wait.h   I_SYS_WAIT)
    check_include_file(termcap.h    I_TERMCAP)
    check_include_file(termios.h    I_TERMIOS)
    check_include_file(unistd.h     I_UNISTD)
    check_include_file(utime.h      I_UTIME)
    check_include_file(vfork.h      I_VFORK)

    # Determine method used for file descriptor I/O
    if(I_FCNTL)
        check_symbol_exists(open "fcntl.h" HAS_FCNTL_OPEN)
        if(HAS_FCNTL_OPEN)
            set(FDIO_FLAVOR "fcntl")
        endif()
    endif()
    if(NOT FDIO_FLAVOR AND I_IO)
        check_symbol_exists(open "io.h" HAS_IO_OPEN)
        if(HAS_IO_OPEN)
            set(FDIO_FLAVOR "io")
        endif()
    endif()
    if(NOT FDIO_FLAVOR)
        message(FATAL_ERROR "Couldn't find open() in <fcntl.h> or <io.h>; file descriptor I/O not found.")
    endif()

    # Pipe open/close functions
    check_symbol_exists(_popen "stdio.h" HAS_UNDERSCORE_POPEN)
    if(HAS_UNDERSCORE_POPEN)
        set(PIPE_IO_FLAVOR "underscore")
    endif()
    if(NOT PIPE_IO_FLAVOR)
        check_symbol_exists(popen "stdio.h" HAS_STANDARD_POPEN)
        if(HAS_STANDARD_POPEN)
            set(PIPE_IO_FLAVOR "standard")
        endif()
    endif()
    if(NOT PIPE_IO_FLAVOR)
        message(FATAL_ERROR "Couldn't determine functions for pipe open/close.")
    endif()

    # String case-insensitive compare functions
    if(I_STRINGS)
        check_symbol_exists(strcasecmp "strings.h" HAS_STRCASECMP)
        if(HAS_STRCASECMP)
            set(STRING_CASE_COMPARE_FLAVOR "strings")
        endif()
    endif()
    if(NOT STRING_CASE_COMPARE_FLAVOR)
        set(STRING_CASE_COMPARE_FLAVOR "manual")
    endif()

    if(I_PWD)
        check_symbol_exists(getpwent "pwd.h" HAS_GETPWENT)
    endif()
    if(I_UNISTD)
        check_symbol_exists(getdomainname "unistd.h" HAS_GETDOMAINNAME)
        check_symbol_exists(gethostname "unistd.h" HAS_GETHOSTNAME)
        check_symbol_exists(vfork "unistd.h" HAS_VFORK)
    endif()
    if(NOT HAS_GETHOSTNAME)
        set(CMAKE_REQUIRED_LIBRARIES "ws2_32.lib")
        check_symbol_exists(gethostname "WinSock2.h" HAS_GETHOSTNAME)
        unset(CMAKE_REQUIRED_LIBRARIES)
    endif()
    if(NOT HAS_GETHOSTNAME)
        check_symbol_exists(uname "sys/utsname.h" HAS_UNAME)
    endif()
    if(NOT HAS_GETDOMAINNAME)
        check_symbol_exists(res_init "arpa/nameser.h;netinet/in.h;resolv.h" HAS_RES_INIT)
    endif()
    # TODO: How to check for UNION_WAIT?
    # TODO: Related: USE_WIFSTAT; seems antiquated.
    if(WIN32)
        find_program(EDITOR_PATH "notepad")
    else()
        find_program(EDITOR_PATH "vi")
    endif()
    if(NOT EDITOR_PATH)
        set(EDITOR_PATH "")
    endif()
    set(DEFAULT_EDITOR "${EDITOR_PATH}" CACHE STRING "The full pathname of the default editor.")
    set(MAIL_FILE "" CACHE STRING "The interpretable name of the mail spool file for the current user.")
    set(MBOX_CHAR "F" CACHE STRING "The character which will match the beginning of a mailbox file.")
    string(LENGTH "${MBOX_CHAR}" MBOX_CHAR_LEN)
    if(NOT (MBOX_CHAR_LEN EQUAL 1))
        message(FATAL_ERROR "Option MBOX_CHAR ('${MBOX_CHAR}') must be set to a single character.")
    endif()
    option(PASS_NAMES "Indicates that full names are stored in the /etc/passwd file." OFF)
    option(BERKELEY_NAMES "Indicates that full names are stored in the /etc/passwd file in Berkeley format." OFF)
    set(INSTALL_PREFIX "${CMAKE_INSTALL_PREFIX}" CACHE STRING
        "The name of the install prefix for this package, defaults to CMAKE_INSTALL_PREFIX.")
    if(WIN32)
        set(DEFAULT_PREF_SHELL "cmd")
    elseif($ENV{SHELL})
        set(DEFAULT_PREF_SHELL "$ENV{SHELL}")
    else()
        set(DEFAULT_PREF_SHELL "bash")
    endif()
    find_program(DEFAULT_PREF_SHELL_PATH "${DEFAULT_PREF_SHELL}")
    if(NOT DEFAULT_PREF_SHELL_PATH)
        message(FATAL_ERROR "Couldn't locate preferred shell '${DEFAULT_PREF_SHELL}'")
    endif()
    set(PREF_SHELL "${DEFAULT_PREF_SHELL_PATH}" CACHE STRING "The full path of the preferred user shell on this system.")
    set(ROOT_UID "0" CACHE STRING "On POSIX systems, the uid of root, normally 0.")
    set(ACTIVE "" CACHE STRING "The name of the active file for the news system. (~ interpolation OK)")
    set(ACTIVE_TIMES "" CACHE STRING "The name of the active.times file for the news system.")
    set(PIPE_HOST_CMD "" CACHE STRING "A command to feed to the popen() routine to derive the host name.")
    set(HAS_TERMLIB ON CACHE BOOL "Indicates that termlib-style routines are available")
    option(IGNORE_ORG "Indicates that the ORGANIZATION environment variable does not contain an organization name." OFF)
    set(SERVER_NAME "news.gmane.io" CACHE STRING "The default server name or a file to open to read the server name.")
    option(HAS_LOCAL_SPOOL "Indicates that there's a local spool directory configured into trn." OFF)
    set(MIMECAP "/etc/mailcap" CACHE STRING
        "The pathname of the mimecap file, which controls what programs get run when handling mime articles.")
    if(WIN32)
        string(REPLACE "\\" "/" _ProgramData "$ENV{ProgramData}")
        set(DEFAULT_NEWS_LIB "${_ProgramData}/trn/news")
    else()
        set(DEFAULT_NEWS_LIB "")
    endif()
    set(NEWS_LIB "${DEFAULT_NEWS_LIB}" CACHE FILEPATH "The path of the directory serving as the news library (~ expansion OK).")
    set(EXTRA_INEWS "" CACHE FILEPATH "The full path of an inews to use for local postings, or nothing.")
    set(GROUP_DESC "" CACHE FILEPATH "The full path of the \"newsgroups\" file for group descriptions, or nothing.")
    set(SUBSCRIPTIONS "" CACHE FILEPATH "The full path of the list of default subscriptions, or nothing (~ expansion OK).")
    set(NEWS_SPOOL "%X/spool" CACHE STRING "The directory name where news articles are spooled (~, % expansion OK.).")
    set(ORG_NAME "%X/organization" CACHE STRING
        "Either the organization name or the full pathname of a file containing the organization name.")
    set(POSTING_HOSTNAME "%X/posting-hostname" CACHE STRING
        "This symbol contains the posting host's name or a file from which to read its name.")
    option(HOST_BITS "Set to true if we should compare only the domain portion of the hostname when looking for local articles." ON)
    set(PRIVATE_LIB "%x/trn" CACHE STRING "The path to private executables; ~, %x and %l expansion allowed.")
    set(OVERVIEW_DIR "" CACHE STRING "The directory containing overview files.")
    set(OVERVIEW_FMT "" CACHE STRING "The name of the overview.fmt file.")
    option(THREAD_INIT "If ON, indicates we act like trn no matter what our name is." OFF)
    option(SELECT_INIT "If ON, indicates we default to the selector for group entry." OFF)
    set(USE_INEWS "%x/inews" CACHE STRING "Full path to the inews to use for posting.")
    # TODO: How to properly configure BIN_DIR to work when developing and after installation?
    set(BIN_DIR "${CMAKE_INSTALL_PREFIX}/bin" CACHE STRING "Path of the bin directory where the package will be installed.")
    set(PAGER "more" CACHE STRING "The name of the preferred pager on the system.")
    option(REPLYTO_POSTER_CHECKING "If ON, makes -p also check Reply-To (slow)" OFF)
    set(NAME_TYPE "bsd" CACHE STRING "The way full names are stored in the password file (bsd, usg or other).")
    set(LOCAL_DIST "none" CACHE STRING "Distribution code for your local organization or none.")
    set(ORGANIZATION_DIST "none" CACHE STRING "Distribution code for your organization or none.")
    set(CITY_DIST "none" CACHE STRING "Distribution code for your city or none.")
    set(STATE_DIST "none" CACHE STRING "Distribution code for your state/province or none.")
    set(MULTISTATE_DIST "none" CACHE STRING "Distribution code for your multi-state region or none.")
    set(COUNTRY_DIST "none" CACHE STRING "Distribution code for your country or none.")
    set(CONTINENT_DIST "none" CACHE STRING "Distribution code for your continent or none.")
    if(IGNORE_ORG)
        set(PNEWS_ORG_NAME "\${NEWSORG-${ORG_NAME}}")
    else()
        set(PNEWS_ORG_NAME "\${NEWSORG-\${ORGANIZATION-${ORG_NAME}}}")
    endif()

    if(WIN32)
        set(MSDOS ON)
    endif()
    if(NOT WIN32)
        set(HAS_NEWS_ADMIN ON)
        set(NEWS_ADMIN "root")
    endif()
    set(NORM_SIG ON)
    # TODO: Does any modern platform return non-void from a signal handler?
    # This seems like a pre-POSIX coping strategy.
    set(SIGNAL_T "void")
    set(SUPPORT_XTHREAD ON)

    configure_file("${CMAKE_CURRENT_FUNCTION_LIST_DIR}/config.h.in" include/config/config.h)
    set(STRING_CASE_COMPARE_SOURCES_strings "")
    set(STRING_CASE_COMPARE_SOURCES_manual "string_case_compare.cpp")
    set(STRING_CASE_COMPARE_SOURCES ${STRING_CASE_COMPARE_SOURCES_${STRING_CASE_COMPARE_FLAVOR}} PARENT_SCOPE)
    configure_flavor_header("fdio" "${FDIO_FLAVOR}")
    configure_flavor_header("pipe_io" "${PIPE_IO_FLAVOR}")
    configure_flavor_header("string_case_compare" "${STRING_CASE_COMPARE_FLAVOR}")
endfunction()
